char *metaTabTest_c =
"{{={% %}=}}\n"
"#include <stdio.h>\n"
"#include <string.h>\n"
"#include <stdlib.h>\n"
"#include <memory.h>\n"
"#include \"metaTab.h\"\n"
"#include \"{%&titulo%}.h\"\n"
"\n"
"main()\n"
"{\n"
"int ret;\n"
"\n"
"//Crea e inicia estructura\n"
"\n"
"{%&titulo%}_t {%&titulo%};\n"
"memset(&{%&titulo%},0, sizeof({%&titulo%}_t));\n"
"\n"
"//Lee tabla\n"
"ret={%&titulo%}Lee(\"{%&titulo%}.tab\",&{%&titulo%});\n"
"if (ret<0) printf(\"No se pudo leer correctamente {%&titulo%}.tab\\n\");\n"
"else printf(\"Leido correctamente \\n\");\n"
"\n"
"// Muestra la lectura\n"
"printf(\"------------- tab print -------------------\\n\");\n"
"{%&titulo%}Pinta(&{%&titulo%});\n"
"printf(\"------------- tab print -------------------\\n\");\n"
"\n"
"// Lee lista\n"
"{%&titulo%}_t *{%&titulo%}Lista;\n"
"ret={%&titulo%}LeeLista(\"{%&titulo%}List.tab\",&{%&titulo%}Lista);\n"
"printf(\"Leidos <%d> registros\\n\",ret);\n"
"\n"
"// Genera Json\n"
"printf(\"Generando Json\\n\");\n"
"ret={%&titulo%}2JsonFile(\"{%&titulo%}.json\",&{%&titulo%});\n"
"\n"
"// Parse Json\n"
"printf(\"Parse JSON generado\\n\");\n"
"char *jsonString;\n"
"ret=leeFileTest(\"{%&titulo%}.json\",&jsonString);\n"
"if (ret<0)\n"
"    printf(\"Error de lectura del fichero <%s>\\n\",\"{%&titulo%}.json\");\n"
"\n"
"{%&titulo%}_t {%&titulo%}1;\n"
"{%&titulo%}ParseJson(jsonString, &{%&titulo%}1);\n"
"// Muestra la lectura json\n"
"printf(\"------------- tab print json parsed-------------------\\n\");\n"
"{%&titulo%}Pinta(&{%&titulo%}1);\n"
"printf(\"------------- tab print json parsed-------------------\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"int leeFileTest(char *file, char **template)\n"
"{\n"
"char *buf;\n"
"FILE *in=fopen(file,\"r\");\n"
"if (!in) return(-1);\n"
"buf=malloc(1);\n"
"strcpy(buf,\"\");\n"
"while(1)\n"
" {\n"
"\n"
"   buf=realloc(buf,strlen(buf)+1001);\n"
"   if (!fgets(buf+strlen(buf),1000,in)) break;\n"
" }\n"
"fclose(in);\n"
"\n"
"*template=buf;\n"
"return(strlen(buf));\n"
"\n"
"}\n"
"int creaFileMeta_{%&titulo%}(metaTab_t *metaTab,char *nameFile)\n"
"{\n"
"int i,j;\n"
"itemCallBack_t *itemCallBack;\n"
"itemLista_t *itemList;\n"
"itemChar_t *itemChar;\n"
"itemObjeto_t *itemObjeto;\n"
"FILE *ou;\n"
"ou=fopen(nameFile,\"w\");\n"
"if (!ou) return(-1);\n"
"for (i=0;i<metaTab->numItems;i++)\n"
"{\n"
" if (metaTab->item[i].tipo=='C')\n"
"   {\n"
"     itemChar=(itemChar_t *)metaTab->item[i].data;\n"
"     fprintf(ou,\"%s:C:%s:%d\\n\",itemChar->nombre,itemChar->descri,itemChar->lenChar);\n"
"   }\n"
"\n"
" if (metaTab->item[i].tipo=='L')\n"
"   {\n"
"     itemList=(itemLista_t *)metaTab->item[i].data;\n"
"     fprintf(ou,\"%s:L:%s:%d:%d\\n\",itemList->nombre,itemList->descri,itemList->lenLista,itemList->lenChar);\n"
"   }\n"
" if (metaTab->item[i].tipo=='Y')\n"
"   {\n"
"     itemCallBack=(itemCallBack_t *)metaTab->item[i].data;\n"
"     fprintf(ou,\"%s:Y:%s:%s\\n\",itemCallBack->nombre,itemCallBack->descri,itemCallBack->tipo);\n"
"   }\n"
" if (metaTab->item[i].tipo=='O')\n"
"   {\n"
"     itemObjeto=(itemObjeto_t *)metaTab->item[i].data;\n"
"     fprintf(ou,\"%s:O:%s\",itemObjeto->nombre,itemObjeto->descri);\n"
"     for(j=0;j<itemObjeto->numItems;j++)\n"
"      {\n"
"       fprintf(ou,\":%s:%s:%d\",itemObjeto->item[j].nombre,itemObjeto->item[j].descri,itemObjeto->item[j].lenChar);\n"
"      }\n"
"    fprintf(ou,\"\\n\");\n"
"   }\n"
"fclose(ou);\n"
"return(0);\n"
"}\n"
"\n"
"}\n"
"\n";
