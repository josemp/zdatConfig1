char *metaTabParseJson_c =
"{{={% %}=}}{%#ignore%}\n"
"   #ignore: esta seccion\n"
"   #tabla : seccion de recorrer toda la tabla\n"
"   #char  : datos de tipo char, solo uno\n"
"   #list  : datos de tipo list, solo uno\n"
"   #object : datos de tipo object, solo uno\n"
"   #itemObjeto : seccion de items de objeto\n"
"   &titulo : titulo de la tabla\n"
"   &name : nombre del elemento\n"
"   &lenChar : longitud de char\n"
"   &lenLista : longitud de la lista\n"
"   &itemObjeto.name : nombre de item objeto\n"
"   &itemObjeto.len : len de item objeto{%/ignore%}\n"
"#include <stdio.h>\n"
"#include <stdlib.h>\n"
"#include <string.h>\n"
"#include \"{%&titulo%}.h\"\n"
"#include \"cJSON.h\"\n"
"\n"
"// Los campos simples de la raiz\n"
"\n"
"parseString(cJSON *item,{%&titulo%}_t *{%&titulo%})\n"
"{ {%#tabla%}{%#char%}\n"
" if (strcmp(item->string,\"{%&name%}\")==0)\n"
"       sprintf({%&titulo%}->{%&name%},\"%.*s\",{%&lenChar%},item->valuestring);\n"
"{%/char%}{%/tabla%}}\n"
"\n"
"// Los campos de objeto\n"
"\n"
"parseItemObjeto(char *padre, cJSON *item,{%&titulo%}_t *{%&titulo%})\n"
"{ {%#tabla%}{%#object%}{%#itemObjeto%}\n"
" if (   strcmp(padre,\"{%&name%}\")==0\n"
"    &&  strcmp(item->string,\"{%&itemObjeto.name%}\")==0)\n"
"       sprintf({%&titulo%}->{%&name%}.{%&itemObjeto.name%},\"%.*s\",{%&itemObjeto.len%},item->valuestring);\n"
"{%/itemObjeto%}{%/object%}{%/tabla%}}\n"
"\n"
"// Los campos de array\n"
"\n"
"parseItemArray(char *padre, cJSON *item,int contador,{%&titulo%}_t *{%&titulo%})\n"
"{ {%#tabla%}{%#list%}\n"
" if (    strcmp(padre,\"{%&name%}\")==0\n"
"     && contador <{%&lenLista%})\n"
"       sprintf({%&titulo%}->{%&name%}[contador],\"%.*s\",{%&lenChar%},item->valuestring);\n"
"{%/list%}{%/tabla%}}\n"
"\n"
"void parse_object(cJSON *item, char *padre, int tipoPadre,{%&titulo%}_t *{%&titulo%})\n"
"{\n"
"int contArray=0;\n"
"    cJSON *myItem = item;\n"
"    while (1)\n"
"    {\n"
"        // handle subitem\n"
"        if (myItem->child)\n"
"        {\n"
"            parse_object(myItem->child,myItem->string,myItem->type,{%&titulo%});\n"
"        }\n"
"       else\n"
"        {\n"
"          if (padre==NULL || strcmp(padre,\"root\")==0)\n"
"              parseString(myItem,{%&titulo%});\n"
"          else if (tipoPadre== cJSON_Object)\n"
"              parseItemObjeto(padre,myItem,{%&titulo%});\n"
"          else if (tipoPadre==cJSON_Array)\n"
"            {\n"
"              parseItemArray(padre,myItem,contArray,{%&titulo%});\n"
"              contArray++;\n"
"            }\n"
"        }\n"
"\n"
"        myItem = myItem->next;\n"
"        if (!myItem) break;\n"
"    }\n"
"}\n"
"\n"
"\n"
"{%&titulo%}ParseJson(char *jsonString,{%&titulo%}_t *{%&titulo%})\n"
"{\n"
"\n"
"//int ret=leeFile(\"prueba.json\",&jsonString);\n"
"//if (ret<0) {printf(\"no pude leer prueba.json\\n\");return;}\n"
"cJSON * root = cJSON_Parse(jsonString);\n"
"if (root==NULL) {return(-1);}\n"
"parse_object(root, \"root\", cJSON_Object, {%&titulo%});\n"
"\n"
"free(root);\n"
"\n"
"return(0);\n"
"\n"
"}\n"
"\n";
