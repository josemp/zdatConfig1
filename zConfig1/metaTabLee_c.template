
{{={% %}=}}#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <memory.h>

#include "{%&titulo%}.h"

{%&titulo%}Lee(char *nombreFichero,{%&titulo%}_t *{%&titulo%})
{
char buf[2001];
char *pun,*pun1,*resto,*campo,*label;
FILE *in = fopen(nombreFichero,"r");
if (!in) return(-1);
while(1)
{
if (!fgets(buf,2000,in))
         break;
 if (strlen(buf)<3) continue;
 buf[strlen(buf)-1]=0;
 {%&titulo%}LimpiaBuf(buf);
if (buf[0]=='#')
         continue;
resto=buf;

 
//...


// Etiquetas
label=buf;
pun=memchr(buf,':',strlen(buf));
if(!pun) continue;
*pun=0;
pun++;
resto=pun;
{%&titulo%}LimpiaBuf(label); 
{%#tabla%}
{%#char%}
// Char {%&name%}
if (strcmp(label,"{%&name%}")==0)
 {
    {%&titulo%}Trunca(resto,{%&lenChar%});
    {%&titulo%}LimpiaBuf(resto);
   strcpy({%&titulo%}->{%&name%},resto);
   continue;
 }
{%/char%}{%#list%}

// LISTA {%&name%}
if (strcmp(label,"{%&name%}")==0)
 {
  int i=0;
  while(1)
   {
    campo=resto;
    pun=memchr(resto,':',strlen(resto));
    if(pun) *pun=0;
    {%&titulo%}Trunca(campo,{%&lenChar%});
    {%&titulo%}LimpiaBuf(campo);
    strcpy({%&titulo%}->{%&name%}[i],campo);
    i++;
    if (!pun) break; 
    pun++;
    if (strlen(pun)==0) break;
    resto=pun;
   }// end while
  continue;
 }
{%/list%}


{%#object%}
// Objeto {%&name%}
if (strcmp(label,"{%&name%}")==0)
 {
{%#itemObjeto%}
// Item {%&itemObjeto.name%}

   campo=resto;
   pun=memchr(resto,':',strlen(resto));
   if(pun) *pun=0;
    {%&titulo%}Trunca(campo,{%&itemObjeto.len%});
    {%&titulo%}LimpiaBuf(campo);
   strcpy({%&titulo%}->{%&name%}.{%&itemObjeto.name%},campo);
   if (!pun) continue; 
   pun++;
   if (strlen(pun)==0) continue;
   resto=pun;
{%/itemObjeto%}}{%/object%}
{%/tabla%}
continue;
 }


fclose(in);
return(0);
}











// PROGRAMA DE LECTURA DE LISTA

// usage:
//        {%&titulo%}_t *{%&titulo%}Lista;
//       numItems = {%&titulo%}LeeLista(nombreFichero,&{%&titulo%}Lista);
{%&titulo%}LeeLista(char *nombreFichero,{%&titulo%}_t **{%&titulo%}Lista)
{
{%&titulo%}_t {%&titulo%}x;
{%&titulo%}_t *{%&titulo%}=&{%&titulo%}x;
int i;
char buf[20001];
int numItems=0;
char *pun,*pun1,*resto,*campo,*label;

memset({%&titulo%},0,sizeof({%&titulo%}_t));

FILE *in = fopen(nombreFichero,"r");
if (!in) return(-1);
while(1)
{
if (!fgets(buf,20000,in))
         break;
 if (strlen(buf)<3) continue;
 buf[strlen(buf)-1]=0;
 {%&titulo%}LimpiaBuf(buf);
if (buf[0]=='#')
         continue;
resto=buf;

 
//...


// Inicia
resto=buf;
{%#tabla%}
{%#list%}
// LISTA {%&name%}
for (i=0;i<{%&lenLista%};i++)
 {
   campo=resto; // esto para chequear el break despues del for
   if (!resto) break;  
   campo=resto;
   pun=memchr(resto,':',strlen(resto));
   if (pun)
    {
     *pun=0;
     pun++;
     resto=pun;
    }
   else
    resto=NULL;

   {%&titulo%}Trunca(campo,{%&lenChar%});
   {%&titulo%}LimpiaBuf(campo);
   strcpy({%&titulo%}->{%&name%}[i],campo);
 }
// si hay un break arriba, hay que hacer un continue, pero sino no hay que hacerlo, pues puede ser el ultimo de la linea, uso el campo para eso
if (!campo) continue;  
{%/list%}
{%#char%}
// Char {%&name%}
if (!resto) continue;  
campo=resto;
pun=memchr(resto,':',strlen(resto));
if (pun)
 {
  *pun=0; pun++; resto=pun;
 }
else
 resto=NULL;
    {%&titulo%}Trunca(campo,{%lenChar%});
    {%&titulo%}LimpiaBuf(campo);
   strcpy({%&titulo%}->{%&name%},campo);
{%/char%}
{%#object%}
// Objeto {%&name%}
{%#itemObjeto%}
if (!resto) continue;  
 campo=resto;
 pun=memchr(resto,':',strlen(resto));
 if (pun)
  { *pun=0; pun++; resto=pun; }
 else resto=NULL;
 {%&titulo%}Trunca(campo,{%&itemObjeto.len%});
 {%&titulo%}LimpiaBuf(campo);
 strcpy({%&titulo%}->{%&name%}.{%&itemObjeto.name%},campo);
{%/itemObjeto%}
{%/object%}
{%/tabla%}
if (numItems==0) *{%&titulo%}Lista=malloc(sizeof({%&titulo%}_t));
else *{%&titulo%}Lista=realloc(*{%&titulo%}Lista,(numItems+1)*sizeof({%&titulo%}_t));
(*{%&titulo%}Lista)[numItems]=*{%&titulo%};
memset({%&titulo%},0,sizeof({%&titulo%}_t));
numItems++;
continue;
}
fclose(in);
return(numItems);
}











{%&titulo%}Pinta({%&titulo%}_t *{%&titulo%})
{
int i;{%#tabla%}{%#list%}
for (i=0;i<{%&lenLista%};i++)
  printf("{%&name%}[i] = %s\n",{%&titulo%}->{%&name%}[i]);{%/list%}{%#char%}
printf("{%&name%} = %s\n",{%&titulo%}->{%&name%});{%/char%}{%#object%}{%#itemObjeto%}
printf("{%&name%}.{%&itemObjeto.name%} = %s\n",{%&titulo%}->{%&name%}.{%&itemObjeto.name%});{%/itemObjeto%}{%/object%}{%/tabla%}
}

// Limpieza de buffer personalizado
{%&titulo%}LimpiaBuf(char *buf)
{
return({%&titulo%}LimpiaBuffer(buf,strlen(buf)));
}
{%&titulo%}LimpiaBuffer(char *buf,int len)
{
 int lenp,ret;
 lenp={%&titulo%}quita_espacios_iniciales(buf,len);
 ret={%&titulo%}quita_espacios_finales(buf,lenp);
 return(ret);
}
{%&titulo%}quita_espacios_iniciales(char *buf ,int len)
{
 int i;
 int lenp=0;
 for (i=0;i<len;i++)
   {
     if (lenp==0 && buf[i]==' ')
               continue;
     buf[lenp]=buf[i];
     lenp++;
   }
 for (i=lenp;i<len;i++)
      buf[i]=0;
 return(lenp);
}
{%&titulo%}quita_espacios_finales(char *buf ,int len)
{
 int i;
 int lenp=len;
 for (i=(len)-1;i>=0;i--)
   {
     if (buf[i]==' ')
     { buf[i]=0;lenp--;}
     else
       break;
   }
 return(lenp);
}

// buf es terminado en 0 si su longitud es mayor que len, lo trunca

{%&titulo%}Trunca(char *buf,int len)
{
if (strlen(buf)>len)
   buf[len]=0;
}
